// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package orion.job02_organisation_dim_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Job02_Organisation_Dim Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Job02_Organisation_Dim implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Job02_Organisation_Dim";
	private final String projectName = "ORION";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Job02_Organisation_Dim.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Job02_Organisation_Dim.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_organization1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_organization3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_organization4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_organization2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_organisation5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class organization_dimStruct implements routines.system.IPersistableRow<organization_dimStruct> {
		final static byte[] commonByteArrayLock_ORION_Job02_Organisation_Dim = new byte[0];
		static byte[] commonByteArray_ORION_Job02_Organisation_Dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public double EMPLOYEE_ID;

		public double getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public String EMPLOYEE_COUNTRY;

		public String getEMPLOYEE_COUNTRY() {
			return this.EMPLOYEE_COUNTRY;
		}

		public String COMPANY;

		public String getCOMPANY() {
			return this.COMPANY;
		}

		public String DEPARTMENT;

		public String getDEPARTMENT() {
			return this.DEPARTMENT;
		}

		public String SECTION;

		public String getSECTION() {
			return this.SECTION;
		}

		public String ORG_GROUP;

		public String getORG_GROUP() {
			return this.ORG_GROUP;
		}

		public String JOB_TITLE;

		public String getJOB_TITLE() {
			return this.JOB_TITLE;
		}

		public String EMPLOYEE_NAME;

		public String getEMPLOYEE_NAME() {
			return this.EMPLOYEE_NAME;
		}

		public String EMPLOYEE_GENDER;

		public String getEMPLOYEE_GENDER() {
			return this.EMPLOYEE_GENDER;
		}

		public Double SALARY;

		public Double getSALARY() {
			return this.SALARY;
		}

		public java.util.Date EMPLOYEE_BIRTH_DATE;

		public java.util.Date getEMPLOYEE_BIRTH_DATE() {
			return this.EMPLOYEE_BIRTH_DATE;
		}

		public java.util.Date EMPLOYEE_HIRE_DATE;

		public java.util.Date getEMPLOYEE_HIRE_DATE() {
			return this.EMPLOYEE_HIRE_DATE;
		}

		public java.util.Date EMPLOYEE_TERM_DATE;

		public java.util.Date getEMPLOYEE_TERM_DATE() {
			return this.EMPLOYEE_TERM_DATE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.EMPLOYEE_ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final organization_dimStruct other = (organization_dimStruct) obj;

			if (this.EMPLOYEE_ID != other.EMPLOYEE_ID)
				return false;

			return true;
		}

		public void copyDataTo(organization_dimStruct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.EMPLOYEE_COUNTRY = this.EMPLOYEE_COUNTRY;
			other.COMPANY = this.COMPANY;
			other.DEPARTMENT = this.DEPARTMENT;
			other.SECTION = this.SECTION;
			other.ORG_GROUP = this.ORG_GROUP;
			other.JOB_TITLE = this.JOB_TITLE;
			other.EMPLOYEE_NAME = this.EMPLOYEE_NAME;
			other.EMPLOYEE_GENDER = this.EMPLOYEE_GENDER;
			other.SALARY = this.SALARY;
			other.EMPLOYEE_BIRTH_DATE = this.EMPLOYEE_BIRTH_DATE;
			other.EMPLOYEE_HIRE_DATE = this.EMPLOYEE_HIRE_DATE;
			other.EMPLOYEE_TERM_DATE = this.EMPLOYEE_TERM_DATE;

		}

		public void copyKeysDataTo(organization_dimStruct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORION_Job02_Organisation_Dim.length) {
					if (length < 1024 && commonByteArray_ORION_Job02_Organisation_Dim.length == 0) {
						commonByteArray_ORION_Job02_Organisation_Dim = new byte[1024];
					} else {
						commonByteArray_ORION_Job02_Organisation_Dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORION_Job02_Organisation_Dim, 0, length);
				strReturn = new String(commonByteArray_ORION_Job02_Organisation_Dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORION_Job02_Organisation_Dim) {

				try {

					int length = 0;

					this.EMPLOYEE_ID = dis.readDouble();

					this.EMPLOYEE_COUNTRY = readString(dis);

					this.COMPANY = readString(dis);

					this.DEPARTMENT = readString(dis);

					this.SECTION = readString(dis);

					this.ORG_GROUP = readString(dis);

					this.JOB_TITLE = readString(dis);

					this.EMPLOYEE_NAME = readString(dis);

					this.EMPLOYEE_GENDER = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SALARY = null;
					} else {
						this.SALARY = dis.readDouble();
					}

					this.EMPLOYEE_BIRTH_DATE = readDate(dis);

					this.EMPLOYEE_HIRE_DATE = readDate(dis);

					this.EMPLOYEE_TERM_DATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.EMPLOYEE_ID);

				// String

				writeString(this.EMPLOYEE_COUNTRY, dos);

				// String

				writeString(this.COMPANY, dos);

				// String

				writeString(this.DEPARTMENT, dos);

				// String

				writeString(this.SECTION, dos);

				// String

				writeString(this.ORG_GROUP, dos);

				// String

				writeString(this.JOB_TITLE, dos);

				// String

				writeString(this.EMPLOYEE_NAME, dos);

				// String

				writeString(this.EMPLOYEE_GENDER, dos);

				// Double

				if (this.SALARY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.SALARY);
				}

				// java.util.Date

				writeDate(this.EMPLOYEE_BIRTH_DATE, dos);

				// java.util.Date

				writeDate(this.EMPLOYEE_HIRE_DATE, dos);

				// java.util.Date

				writeDate(this.EMPLOYEE_TERM_DATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",EMPLOYEE_COUNTRY=" + EMPLOYEE_COUNTRY);
			sb.append(",COMPANY=" + COMPANY);
			sb.append(",DEPARTMENT=" + DEPARTMENT);
			sb.append(",SECTION=" + SECTION);
			sb.append(",ORG_GROUP=" + ORG_GROUP);
			sb.append(",JOB_TITLE=" + JOB_TITLE);
			sb.append(",EMPLOYEE_NAME=" + EMPLOYEE_NAME);
			sb.append(",EMPLOYEE_GENDER=" + EMPLOYEE_GENDER);
			sb.append(",SALARY=" + String.valueOf(SALARY));
			sb.append(",EMPLOYEE_BIRTH_DATE=" + String.valueOf(EMPLOYEE_BIRTH_DATE));
			sb.append(",EMPLOYEE_HIRE_DATE=" + String.valueOf(EMPLOYEE_HIRE_DATE));
			sb.append(",EMPLOYEE_TERM_DATE=" + String.valueOf(EMPLOYEE_TERM_DATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(organization_dimStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEE_ID, other.EMPLOYEE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class staffStruct implements routines.system.IPersistableRow<staffStruct> {
		final static byte[] commonByteArrayLock_ORION_Job02_Organisation_Dim = new byte[0];
		static byte[] commonByteArray_ORION_Job02_Organisation_Dim = new byte[0];

		public Double Employee_ID;

		public Double getEmployee_ID() {
			return this.Employee_ID;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public java.util.Date End_Date;

		public java.util.Date getEnd_Date() {
			return this.End_Date;
		}

		public String Job_Title;

		public String getJob_Title() {
			return this.Job_Title;
		}

		public Double Salary;

		public Double getSalary() {
			return this.Salary;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public java.util.Date Birth_Date;

		public java.util.Date getBirth_Date() {
			return this.Birth_Date;
		}

		public java.util.Date Emp_Hire_Date;

		public java.util.Date getEmp_Hire_Date() {
			return this.Emp_Hire_Date;
		}

		public java.util.Date Emp_Term_Date;

		public java.util.Date getEmp_Term_Date() {
			return this.Emp_Term_Date;
		}

		public Double Manager_ID;

		public Double getManager_ID() {
			return this.Manager_ID;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORION_Job02_Organisation_Dim.length) {
					if (length < 1024 && commonByteArray_ORION_Job02_Organisation_Dim.length == 0) {
						commonByteArray_ORION_Job02_Organisation_Dim = new byte[1024];
					} else {
						commonByteArray_ORION_Job02_Organisation_Dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORION_Job02_Organisation_Dim, 0, length);
				strReturn = new String(commonByteArray_ORION_Job02_Organisation_Dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORION_Job02_Organisation_Dim) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Employee_ID = null;
					} else {
						this.Employee_ID = dis.readDouble();
					}

					this.Start_Date = readDate(dis);

					this.End_Date = readDate(dis);

					this.Job_Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Salary = null;
					} else {
						this.Salary = dis.readDouble();
					}

					this.Gender = readString(dis);

					this.Birth_Date = readDate(dis);

					this.Emp_Hire_Date = readDate(dis);

					this.Emp_Term_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Manager_ID = null;
					} else {
						this.Manager_ID = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.Employee_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Employee_ID);
				}

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

				// String

				writeString(this.Job_Title, dos);

				// Double

				if (this.Salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Salary);
				}

				// String

				writeString(this.Gender, dos);

				// java.util.Date

				writeDate(this.Birth_Date, dos);

				// java.util.Date

				writeDate(this.Emp_Hire_Date, dos);

				// java.util.Date

				writeDate(this.Emp_Term_Date, dos);

				// Double

				if (this.Manager_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Manager_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Employee_ID=" + String.valueOf(Employee_ID));
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",End_Date=" + String.valueOf(End_Date));
			sb.append(",Job_Title=" + Job_Title);
			sb.append(",Salary=" + String.valueOf(Salary));
			sb.append(",Gender=" + Gender);
			sb.append(",Birth_Date=" + String.valueOf(Birth_Date));
			sb.append(",Emp_Hire_Date=" + String.valueOf(Emp_Hire_Date));
			sb.append(",Emp_Term_Date=" + String.valueOf(Emp_Term_Date));
			sb.append(",Manager_ID=" + String.valueOf(Manager_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(staffStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputExcel_1Struct
			implements routines.system.IPersistableRow<after_tFileInputExcel_1Struct> {
		final static byte[] commonByteArrayLock_ORION_Job02_Organisation_Dim = new byte[0];
		static byte[] commonByteArray_ORION_Job02_Organisation_Dim = new byte[0];

		public Double Employee_ID;

		public Double getEmployee_ID() {
			return this.Employee_ID;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public java.util.Date End_Date;

		public java.util.Date getEnd_Date() {
			return this.End_Date;
		}

		public String Job_Title;

		public String getJob_Title() {
			return this.Job_Title;
		}

		public Double Salary;

		public Double getSalary() {
			return this.Salary;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public java.util.Date Birth_Date;

		public java.util.Date getBirth_Date() {
			return this.Birth_Date;
		}

		public java.util.Date Emp_Hire_Date;

		public java.util.Date getEmp_Hire_Date() {
			return this.Emp_Hire_Date;
		}

		public java.util.Date Emp_Term_Date;

		public java.util.Date getEmp_Term_Date() {
			return this.Emp_Term_Date;
		}

		public Double Manager_ID;

		public Double getManager_ID() {
			return this.Manager_ID;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORION_Job02_Organisation_Dim.length) {
					if (length < 1024 && commonByteArray_ORION_Job02_Organisation_Dim.length == 0) {
						commonByteArray_ORION_Job02_Organisation_Dim = new byte[1024];
					} else {
						commonByteArray_ORION_Job02_Organisation_Dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORION_Job02_Organisation_Dim, 0, length);
				strReturn = new String(commonByteArray_ORION_Job02_Organisation_Dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORION_Job02_Organisation_Dim) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Employee_ID = null;
					} else {
						this.Employee_ID = dis.readDouble();
					}

					this.Start_Date = readDate(dis);

					this.End_Date = readDate(dis);

					this.Job_Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Salary = null;
					} else {
						this.Salary = dis.readDouble();
					}

					this.Gender = readString(dis);

					this.Birth_Date = readDate(dis);

					this.Emp_Hire_Date = readDate(dis);

					this.Emp_Term_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Manager_ID = null;
					} else {
						this.Manager_ID = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.Employee_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Employee_ID);
				}

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

				// String

				writeString(this.Job_Title, dos);

				// Double

				if (this.Salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Salary);
				}

				// String

				writeString(this.Gender, dos);

				// java.util.Date

				writeDate(this.Birth_Date, dos);

				// java.util.Date

				writeDate(this.Emp_Hire_Date, dos);

				// java.util.Date

				writeDate(this.Emp_Term_Date, dos);

				// Double

				if (this.Manager_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Manager_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Employee_ID=" + String.valueOf(Employee_ID));
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",End_Date=" + String.valueOf(End_Date));
			sb.append(",Job_Title=" + Job_Title);
			sb.append(",Salary=" + String.valueOf(Salary));
			sb.append(",Gender=" + Gender);
			sb.append(",Birth_Date=" + String.valueOf(Birth_Date));
			sb.append(",Emp_Hire_Date=" + String.valueOf(Emp_Hire_Date));
			sb.append(",Emp_Term_Date=" + String.valueOf(Emp_Term_Date));
			sb.append(",Manager_ID=" + String.valueOf(Manager_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputExcel_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_1Process(globalMap);
				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);
				tDBInput_4Process(globalMap);
				tDBInput_5Process(globalMap);

				staffStruct staff = new staffStruct();
				organization_dimStruct organization_dim = new organization_dimStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "organization_dim");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int tmp_batchUpdateCount_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;

				// optional table
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				String driverClass_tDBOutput_1 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String url_tDBOutput_1 = null;
				url_tDBOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "" + ")(port="
						+ "1521" + "))(connect_data=(service_name=" + "orcl" + ")))";
				String dbUser_tDBOutput_1 = "system";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:8lEla+1r9lI0dpQEt8vZHZU0CmJs6qkgFE2v36+5NYYeaQ==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				dbschema_tDBOutput_1 = "";

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);
				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;
				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;
				int count_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("ORGANIZATION_DIM");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("ORGANIZATION_DIM");
				}
				String insert_tDBOutput_1 = "INSERT INTO " + tableName_tDBOutput_1
						+ " (EMPLOYEE_ID,EMPLOYEE_COUNTRY,COMPANY,DEPARTMENT,SECTION,ORG_GROUP,JOB_TITLE,EMPLOYEE_NAME,EMPLOYEE_GENDER,SALARY,EMPLOYEE_BIRTH_DATE,EMPLOYEE_HIRE_DATE,EMPLOYEE_TERM_DATE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "staff");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization1Struct> tHash_Lookup_organization1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization1Struct>) globalMap
						.get("tHash_Lookup_organization1"));

				organization1Struct organization1HashKey = new organization1Struct();
				organization1Struct organization1Default = new organization1Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization2Struct> tHash_Lookup_organization2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization2Struct>) globalMap
						.get("tHash_Lookup_organization2"));

				organization2Struct organization2HashKey = new organization2Struct();
				organization2Struct organization2Default = new organization2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization3Struct> tHash_Lookup_organization3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization3Struct>) globalMap
						.get("tHash_Lookup_organization3"));

				organization3Struct organization3HashKey = new organization3Struct();
				organization3Struct organization3Default = new organization3Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization4Struct> tHash_Lookup_organization4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization4Struct>) globalMap
						.get("tHash_Lookup_organization4"));

				organization4Struct organization4HashKey = new organization4Struct();
				organization4Struct organization4Default = new organization4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organisation5Struct> tHash_Lookup_organisation5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organisation5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organisation5Struct>) globalMap
						.get("tHash_Lookup_organisation5"));

				organisation5Struct organisation5HashKey = new organisation5Struct();
				organisation5Struct organisation5Default = new organisation5Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				organization_dimStruct organization_dim_tmp = new organization_dimStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_1 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_1.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_1.setEncoding("UTF-8");

				Object source_tFileInputExcel_1 = "D:/ENSMA/CoursTP/TP_Donnee/staff(1).xls";
				final jxl.Workbook workbook_tFileInputExcel_1;

				java.io.InputStream toClose_tFileInputExcel_1 = null;
				java.io.BufferedInputStream buffIStreamtFileInputExcel_1 = null;
				try {
					if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_1 = (java.io.InputStream) source_tFileInputExcel_1;
						buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(toClose_tFileInputExcel_1);
						workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_1,
								workbookSettings_tFileInputExcel_1);
					} else if (source_tFileInputExcel_1 instanceof String) {
						toClose_tFileInputExcel_1 = new java.io.FileInputStream(source_tFileInputExcel_1.toString());
						buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(toClose_tFileInputExcel_1);
						workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_1,
								workbookSettings_tFileInputExcel_1);
					} else {
						workbook_tFileInputExcel_1 = null;
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					try {
						if (buffIStreamtFileInputExcel_1 != null) {
							buffIStreamtFileInputExcel_1.close();
						}
					} catch (Exception e) {
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_1 = java.util.Arrays.<jxl.Sheet>asList(
							workbook_tFileInputExcel_1.getSheets());
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_1 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheet_FilterNullList_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += sheet_tFileInputExcel_1.getRows();
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_1 = null;
						jxl.Sheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRows();
							}
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET", sheet_tFileInputExcel_1.getName());
							staff = null;
							int tempRowLength_tFileInputExcel_1 = 10;

							int columnIndex_tFileInputExcel_1 = 0;

//
//end%>

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > row_tFileInputExcel_1.length
									? row_tFileInputExcel_1.length
									: end_column_tFileInputExcel_1;

							java.util.TimeZone zone_tFileInputExcel_1 = java.util.TimeZone.getTimeZone("GMT");
							java.text.SimpleDateFormat sdf_tFileInputExcel_1 = new java.text.SimpleDateFormat(
									"dd-MM-yyyy");
							sdf_tFileInputExcel_1.setTimeZone(zone_tFileInputExcel_1);

							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {

								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {

									jxl.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1[i
											+ start_column_tFileInputExcel_1];
									temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getContents();

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_1 = false;
							staff = new staffStruct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Employee_ID";
									staff.Employee_ID = ParserUtils
											.parseTo_Double(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									staff.Employee_ID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Start_Date";
									if (1 < actual_end_column_tFileInputExcel_1) {
										try {
											java.util.Date dateGMT_tFileInputExcel_1 = ((jxl.DateCell) row_tFileInputExcel_1[columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1]).getDate();
											staff.Start_Date = new java.util.Date(dateGMT_tFileInputExcel_1.getTime()
													- java.util.TimeZone.getDefault()
															.getOffset(dateGMT_tFileInputExcel_1.getTime()));
										} catch (java.lang.Exception e) {

											throw new RuntimeException("The cell format is not Date in ( Row. "
													+ (nb_line_tFileInputExcel_1 + 1) + " and ColumnNum. "
													+ curColNum_tFileInputExcel_1 + " )");
										}
									}
								} else {
									staff.Start_Date = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "End_Date";
									if (2 < actual_end_column_tFileInputExcel_1) {
										try {
											java.util.Date dateGMT_tFileInputExcel_1 = ((jxl.DateCell) row_tFileInputExcel_1[columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1]).getDate();
											staff.End_Date = new java.util.Date(dateGMT_tFileInputExcel_1.getTime()
													- java.util.TimeZone.getDefault()
															.getOffset(dateGMT_tFileInputExcel_1.getTime()));
										} catch (java.lang.Exception e) {

											throw new RuntimeException("The cell format is not Date in ( Row. "
													+ (nb_line_tFileInputExcel_1 + 1) + " and ColumnNum. "
													+ curColNum_tFileInputExcel_1 + " )");
										}
									}
								} else {
									staff.End_Date = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Job_Title";
									staff.Job_Title = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									staff.Job_Title = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 4;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Salary";
									staff.Salary = ParserUtils
											.parseTo_Double(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									staff.Salary = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 5;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Gender";
									staff.Gender = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									staff.Gender = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 6;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Birth_Date";
									if (6 < actual_end_column_tFileInputExcel_1) {
										try {
											java.util.Date dateGMT_tFileInputExcel_1 = ((jxl.DateCell) row_tFileInputExcel_1[columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1]).getDate();
											staff.Birth_Date = new java.util.Date(dateGMT_tFileInputExcel_1.getTime()
													- java.util.TimeZone.getDefault()
															.getOffset(dateGMT_tFileInputExcel_1.getTime()));
										} catch (java.lang.Exception e) {

											throw new RuntimeException("The cell format is not Date in ( Row. "
													+ (nb_line_tFileInputExcel_1 + 1) + " and ColumnNum. "
													+ curColNum_tFileInputExcel_1 + " )");
										}
									}
								} else {
									staff.Birth_Date = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 7;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Emp_Hire_Date";
									if (7 < actual_end_column_tFileInputExcel_1) {
										try {
											java.util.Date dateGMT_tFileInputExcel_1 = ((jxl.DateCell) row_tFileInputExcel_1[columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1]).getDate();
											staff.Emp_Hire_Date = new java.util.Date(dateGMT_tFileInputExcel_1.getTime()
													- java.util.TimeZone.getDefault()
															.getOffset(dateGMT_tFileInputExcel_1.getTime()));
										} catch (java.lang.Exception e) {

											throw new RuntimeException("The cell format is not Date in ( Row. "
													+ (nb_line_tFileInputExcel_1 + 1) + " and ColumnNum. "
													+ curColNum_tFileInputExcel_1 + " )");
										}
									}
								} else {
									staff.Emp_Hire_Date = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 8;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Emp_Term_Date";
									if (8 < actual_end_column_tFileInputExcel_1) {
										try {
											java.util.Date dateGMT_tFileInputExcel_1 = ((jxl.DateCell) row_tFileInputExcel_1[columnIndex_tFileInputExcel_1
													+ start_column_tFileInputExcel_1]).getDate();
											staff.Emp_Term_Date = new java.util.Date(dateGMT_tFileInputExcel_1.getTime()
													- java.util.TimeZone.getDefault()
															.getOffset(dateGMT_tFileInputExcel_1.getTime()));
										} catch (java.lang.Exception e) {

											throw new RuntimeException("The cell format is not Date in ( Row. "
													+ (nb_line_tFileInputExcel_1 + 1) + " and ColumnNum. "
													+ curColNum_tFileInputExcel_1 + " )");
										}
									}
								} else {
									staff.Emp_Term_Date = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 9;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Manager_ID";
									staff.Manager_ID = ParserUtils
											.parseTo_Double(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									staff.Manager_ID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								staff = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
// Start of branch "staff"
							if (staff != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "staff");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "organization1"
								///////////////////////////////////////////////

								boolean forceLooporganization1 = false;

								organization1Struct organization1ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									organization1HashKey.EMPLOYEE_ID = staff.Employee_ID;

									organization1HashKey.hashCodeDirty = true;

									tHash_Lookup_organization1.lookup(organization1HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_organization1 != null
										&& tHash_Lookup_organization1.getCount(organization1HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
									// 'organization1' and it contains more one result from keys :
									// organization1.EMPLOYEE_ID = '" + organization1HashKey.EMPLOYEE_ID + "'");
								} // G 071

								organization1Struct organization1 = null;

								organization1Struct fromLookup_organization1 = null;
								organization1 = organization1Default;

								if (tHash_Lookup_organization1 != null && tHash_Lookup_organization1.hasNext()) { // G
																													// 099

									fromLookup_organization1 = tHash_Lookup_organization1.next();

								} // G 099

								if (fromLookup_organization1 != null) {
									organization1 = fromLookup_organization1;
								}

								///////////////////////////////////////////////
								// Starting Lookup Table "organization2"
								///////////////////////////////////////////////

								boolean forceLooporganization2 = false;

								organization2Struct organization2ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									organization2HashKey.EMPLOYEE_ID = organization1.ORG_REF_ID;

									organization2HashKey.hashCodeDirty = true;

									tHash_Lookup_organization2.lookup(organization2HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_organization2 != null
										&& tHash_Lookup_organization2.getCount(organization2HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
									// 'organization2' and it contains more one result from keys :
									// organization2.EMPLOYEE_ID = '" + organization2HashKey.EMPLOYEE_ID + "'");
								} // G 071

								organization2Struct organization2 = null;

								organization2Struct fromLookup_organization2 = null;
								organization2 = organization2Default;

								if (tHash_Lookup_organization2 != null && tHash_Lookup_organization2.hasNext()) { // G
																													// 099

									fromLookup_organization2 = tHash_Lookup_organization2.next();

								} // G 099

								if (fromLookup_organization2 != null) {
									organization2 = fromLookup_organization2;
								}

								///////////////////////////////////////////////
								// Starting Lookup Table "organization3"
								///////////////////////////////////////////////

								boolean forceLooporganization3 = false;

								organization3Struct organization3ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									organization3HashKey.EMPLOYEE_ID = organization2.ORG_REF_ID;

									organization3HashKey.hashCodeDirty = true;

									tHash_Lookup_organization3.lookup(organization3HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_organization3 != null
										&& tHash_Lookup_organization3.getCount(organization3HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
									// 'organization3' and it contains more one result from keys :
									// organization3.EMPLOYEE_ID = '" + organization3HashKey.EMPLOYEE_ID + "'");
								} // G 071

								organization3Struct organization3 = null;

								organization3Struct fromLookup_organization3 = null;
								organization3 = organization3Default;

								if (tHash_Lookup_organization3 != null && tHash_Lookup_organization3.hasNext()) { // G
																													// 099

									fromLookup_organization3 = tHash_Lookup_organization3.next();

								} // G 099

								if (fromLookup_organization3 != null) {
									organization3 = fromLookup_organization3;
								}

								///////////////////////////////////////////////
								// Starting Lookup Table "organization4"
								///////////////////////////////////////////////

								boolean forceLooporganization4 = false;

								organization4Struct organization4ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									organization4HashKey.EMPLOYEE_ID = organization3.ORG_REF_ID;

									organization4HashKey.hashCodeDirty = true;

									tHash_Lookup_organization4.lookup(organization4HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_organization4 != null
										&& tHash_Lookup_organization4.getCount(organization4HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
									// 'organization4' and it contains more one result from keys :
									// organization4.EMPLOYEE_ID = '" + organization4HashKey.EMPLOYEE_ID + "'");
								} // G 071

								organization4Struct organization4 = null;

								organization4Struct fromLookup_organization4 = null;
								organization4 = organization4Default;

								if (tHash_Lookup_organization4 != null && tHash_Lookup_organization4.hasNext()) { // G
																													// 099

									fromLookup_organization4 = tHash_Lookup_organization4.next();

								} // G 099

								if (fromLookup_organization4 != null) {
									organization4 = fromLookup_organization4;
								}

								///////////////////////////////////////////////
								// Starting Lookup Table "organisation5"
								///////////////////////////////////////////////

								boolean forceLooporganisation5 = false;

								organisation5Struct organisation5ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									organisation5HashKey.EMPLOYEE_ID = organization4.ORG_REF_ID;

									organisation5HashKey.hashCodeDirty = true;

									tHash_Lookup_organisation5.lookup(organisation5HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_organisation5 != null
										&& tHash_Lookup_organisation5.getCount(organisation5HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
									// 'organisation5' and it contains more one result from keys :
									// organisation5.EMPLOYEE_ID = '" + organisation5HashKey.EMPLOYEE_ID + "'");
								} // G 071

								organisation5Struct organisation5 = null;

								organisation5Struct fromLookup_organisation5 = null;
								organisation5 = organisation5Default;

								if (tHash_Lookup_organisation5 != null && tHash_Lookup_organisation5.hasNext()) { // G
																													// 099

									fromLookup_organisation5 = tHash_Lookup_organisation5.next();

								} // G 099

								if (fromLookup_organisation5 != null) {
									organisation5 = fromLookup_organisation5;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									organization_dim = null;

// # Output table : 'organization_dim'
									organization_dim_tmp.EMPLOYEE_ID = staff.Employee_ID;
									organization_dim_tmp.EMPLOYEE_COUNTRY = organization1.COUNTRY;
									organization_dim_tmp.COMPANY = organisation5.ORG_NAME;
									organization_dim_tmp.DEPARTMENT = organization4.ORG_NAME;
									organization_dim_tmp.SECTION = organization3.ORG_NAME;
									organization_dim_tmp.ORG_GROUP = organization2.ORG_NAME;
									organization_dim_tmp.JOB_TITLE = staff.Job_Title;
									organization_dim_tmp.EMPLOYEE_NAME = organization1.ORG_NAME;
									organization_dim_tmp.EMPLOYEE_GENDER = staff.Gender;
									organization_dim_tmp.SALARY = staff.Salary;
									organization_dim_tmp.EMPLOYEE_BIRTH_DATE = staff.Birth_Date;
									organization_dim_tmp.EMPLOYEE_HIRE_DATE = staff.Emp_Hire_Date;
									organization_dim_tmp.EMPLOYEE_TERM_DATE = staff.Emp_Term_Date;
									organization_dim = organization_dim_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "organization_dim"
								if (organization_dim != null) {

									/**
									 * [tDBOutput_1 main ] start
									 */

									currentComponent = "tDBOutput_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "organization_dim");
									}

									whetherReject_tDBOutput_1 = false;
									pstmt_tDBOutput_1.setDouble(1, organization_dim.EMPLOYEE_ID);

									if (organization_dim.EMPLOYEE_COUNTRY == null) {
										pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(2, organization_dim.EMPLOYEE_COUNTRY);
									}

									if (organization_dim.COMPANY == null) {
										pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(3, organization_dim.COMPANY);
									}

									if (organization_dim.DEPARTMENT == null) {
										pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(4, organization_dim.DEPARTMENT);
									}

									if (organization_dim.SECTION == null) {
										pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(5, organization_dim.SECTION);
									}

									if (organization_dim.ORG_GROUP == null) {
										pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(6, organization_dim.ORG_GROUP);
									}

									if (organization_dim.JOB_TITLE == null) {
										pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(7, organization_dim.JOB_TITLE);
									}

									if (organization_dim.EMPLOYEE_NAME == null) {
										pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(8, organization_dim.EMPLOYEE_NAME);
									}

									if (organization_dim.EMPLOYEE_GENDER == null) {
										pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
									} else {
										if (organization_dim.EMPLOYEE_GENDER == null) {
											pstmt_tDBOutput_1.setNull(9, java.sql.Types.CHAR);
										} else if (organization_dim.EMPLOYEE_GENDER == " ") {
											pstmt_tDBOutput_1.setString(9, "");
										} else {
											pstmt_tDBOutput_1.setString(9,
													String.valueOf(organization_dim.EMPLOYEE_GENDER));
										}
									}

									if (organization_dim.SALARY == null) {
										pstmt_tDBOutput_1.setNull(10, java.sql.Types.DOUBLE);
									} else {
										pstmt_tDBOutput_1.setDouble(10, organization_dim.SALARY);
									}

									if (organization_dim.EMPLOYEE_BIRTH_DATE != null) {
										pstmt_tDBOutput_1.setObject(11,
												new java.sql.Timestamp(organization_dim.EMPLOYEE_BIRTH_DATE.getTime()),
												java.sql.Types.DATE);
									} else {
										pstmt_tDBOutput_1.setNull(11, java.sql.Types.DATE);
									}

									if (organization_dim.EMPLOYEE_HIRE_DATE != null) {
										pstmt_tDBOutput_1.setObject(12,
												new java.sql.Timestamp(organization_dim.EMPLOYEE_HIRE_DATE.getTime()),
												java.sql.Types.DATE);
									} else {
										pstmt_tDBOutput_1.setNull(12, java.sql.Types.DATE);
									}

									if (organization_dim.EMPLOYEE_TERM_DATE != null) {
										pstmt_tDBOutput_1.setObject(13,
												new java.sql.Timestamp(organization_dim.EMPLOYEE_TERM_DATE.getTime()),
												java.sql.Types.DATE);
									} else {
										pstmt_tDBOutput_1.setNull(13, java.sql.Types.DATE);
									}

									pstmt_tDBOutput_1.addBatch();
									nb_line_tDBOutput_1++;
									batchSizeCounter_tDBOutput_1++;
									if (batchSize_tDBOutput_1 > 0
											&& batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
										try {
											pstmt_tDBOutput_1.executeBatch();
										} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
											java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
													sqle_tDBOutput_1 = null;
											String errormessage_tDBOutput_1;
											if (ne_tDBOutput_1 != null) {
												// build new exception to provide the original cause
												sqle_tDBOutput_1 = new java.sql.SQLException(
														e_tDBOutput_1.getMessage() + "\ncaused by: "
																+ ne_tDBOutput_1.getMessage(),
														ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
														ne_tDBOutput_1);
												errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
											} else {
												errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
											}

											System.err.println(errormessage_tDBOutput_1);

										}
										tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
										insertedCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
												? tmp_batchUpdateCount_tDBOutput_1
												: 0);
										batchSizeCounter_tDBOutput_1 = 0;
									}
									commitCounter_tDBOutput_1++;
									if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

										try {
											pstmt_tDBOutput_1.executeBatch();
										} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
											java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
													sqle_tDBOutput_1 = null;
											String errormessage_tDBOutput_1;
											if (ne_tDBOutput_1 != null) {
												// build new exception to provide the original cause
												sqle_tDBOutput_1 = new java.sql.SQLException(
														e_tDBOutput_1.getMessage() + "\ncaused by: "
																+ ne_tDBOutput_1.getMessage(),
														ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
														ne_tDBOutput_1);
												errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
											} else {
												errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
											}

											System.err.println(errormessage_tDBOutput_1);

										}
										tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
										insertedCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
												? tmp_batchUpdateCount_tDBOutput_1
												: 0);
										conn_tDBOutput_1.commit();
										commitCounter_tDBOutput_1 = 0;
									}

									tos_count_tDBOutput_1++;

									/**
									 * [tDBOutput_1 main ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_end ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_end ] stop
									 */

								} // End of branch "organization_dim"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "staff"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE", nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.close();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_organization1 != null) {
					tHash_Lookup_organization1.endGet();
				}
				globalMap.remove("tHash_Lookup_organization1");

				if (tHash_Lookup_organization2 != null) {
					tHash_Lookup_organization2.endGet();
				}
				globalMap.remove("tHash_Lookup_organization2");

				if (tHash_Lookup_organization3 != null) {
					tHash_Lookup_organization3.endGet();
				}
				globalMap.remove("tHash_Lookup_organization3");

				if (tHash_Lookup_organization4 != null) {
					tHash_Lookup_organization4.endGet();
				}
				globalMap.remove("tHash_Lookup_organization4");

				if (tHash_Lookup_organisation5 != null) {
					tHash_Lookup_organisation5.endGet();
				}
				globalMap.remove("tHash_Lookup_organisation5");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "staff");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (pstmt_tDBOutput_1 != null) {

						pstmt_tDBOutput_1.executeBatch();

					}
				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					System.err.println(errormessage_tDBOutput_1);

				}
				if (pstmt_tDBOutput_1 != null) {
					tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();

					insertedCount_tDBOutput_1

							+= (tmp_batchUpdateCount_tDBOutput_1 != -1 ? tmp_batchUpdateCount_tDBOutput_1 : 0);
				}
				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "organization_dim");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_organization1");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_organization3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_organization4");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_organization2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_organisation5");

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class organization1Struct
			implements routines.system.IPersistableComparableLookupRow<organization1Struct> {
		final static byte[] commonByteArrayLock_ORION_Job02_Organisation_Dim = new byte[0];
		static byte[] commonByteArray_ORION_Job02_Organisation_Dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Double EMPLOYEE_ID;

		public Double getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public String ORG_NAME;

		public String getORG_NAME() {
			return this.ORG_NAME;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public Double ORG_LEVEL;

		public Double getORG_LEVEL() {
			return this.ORG_LEVEL;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public Double ORG_REF_ID;

		public Double getORG_REF_ID() {
			return this.ORG_REF_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final organization1Struct other = (organization1Struct) obj;

			if (this.EMPLOYEE_ID == null) {
				if (other.EMPLOYEE_ID != null)
					return false;

			} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))

				return false;

			return true;
		}

		public void copyDataTo(organization1Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.ORG_NAME = this.ORG_NAME;
			other.COUNTRY = this.COUNTRY;
			other.ORG_LEVEL = this.ORG_LEVEL;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.ORG_REF_ID = this.ORG_REF_ID;

		}

		public void copyKeysDataTo(organization1Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORION_Job02_Organisation_Dim) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.EMPLOYEE_ID = null;
					} else {
						this.EMPLOYEE_ID = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.EMPLOYEE_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.EMPLOYEE_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ORG_NAME = readString(dis, ois);

				this.COUNTRY = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ORG_LEVEL = null;
				} else {
					this.ORG_LEVEL = dis.readDouble();
				}

				this.START_DATE = readDate(dis, ois);

				this.END_DATE = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ORG_REF_ID = null;
				} else {
					this.ORG_REF_ID = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ORG_NAME, dos, oos);

				writeString(this.COUNTRY, dos, oos);

				if (this.ORG_LEVEL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORG_LEVEL);
				}

				writeDate(this.START_DATE, dos, oos);

				writeDate(this.END_DATE, dos, oos);

				if (this.ORG_REF_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORG_REF_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",ORG_NAME=" + ORG_NAME);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",ORG_LEVEL=" + String.valueOf(ORG_LEVEL));
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",ORG_REF_ID=" + String.valueOf(ORG_REF_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(organization1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEE_ID, other.EMPLOYEE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				organization1Struct organization1 = new organization1Struct();

				/**
				 * [tAdvancedHash_organization1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_organization1", false);
				start_Hash.put("tAdvancedHash_organization1", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_organization1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "organization1");
				}

				int tos_count_tAdvancedHash_organization1 = 0;

				// connection name:organization1
				// source node:tDBInput_1 - inputs:(after_tFileInputExcel_1)
				// outputs:(organization1,organization1) | target
				// node:tAdvancedHash_organization1 - inputs:(organization1) outputs:()
				// linked node: tMap_1 -
				// inputs:(staff,organization1,organization3,organization4,organization2,organisation5)
				// outputs:(organization_dim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_organization1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization1Struct> tHash_Lookup_organization1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<organization1Struct>getLookup(matchingModeEnum_organization1);

				globalMap.put("tHash_Lookup_organization1", tHash_Lookup_organization1);

				/**
				 * [tAdvancedHash_organization1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_1);

				String url_tDBInput_1 = "jdbc:ucanaccess://" + "E:/Documents/Workspace/TP_Donnee/orion.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_1 = "";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:xwn1GLszelsskq5wmQ5yxWE9+7EvQDs51+WzOw==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String atnParams_tDBInput_1 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_1 = atnParams_tDBInput_1.replaceAll("&", "\n");
				java.util.Properties atnParamsPrope_tDBInput_1 = new java.util.Properties();
				atnParamsPrope_tDBInput_1.put("user", dbUser_tDBInput_1);
				atnParamsPrope_tDBInput_1.put("password", dbPwd_tDBInput_1);
				atnParamsPrope_tDBInput_1.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_1.getBytes()));
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, atnParamsPrope_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  ORGANIZATION.EMPLOYEE_ID, \n  ORGANIZATION.ORG_NAME, \n  ORGANIZATION.COUNTRY, \n  ORGANIZATION.ORG_LEVEL, \n  OR"
						+ "GANIZATION.START_DATE, \n  ORGANIZATION.END_DATE, \n  ORGANIZATION.ORG_REF_ID\nFROM ORGANIZATION\nWHERE ORG_LEVEL=1";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							organization1.EMPLOYEE_ID = null;
						} else {

							organization1.EMPLOYEE_ID = rs_tDBInput_1.getDouble(1);
							if (rs_tDBInput_1.wasNull()) {
								organization1.EMPLOYEE_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							organization1.ORG_NAME = null;
						} else {

							organization1.ORG_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							organization1.COUNTRY = null;
						} else {

							organization1.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							organization1.ORG_LEVEL = null;
						} else {

							organization1.ORG_LEVEL = rs_tDBInput_1.getDouble(4);
							if (rs_tDBInput_1.wasNull()) {
								organization1.ORG_LEVEL = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							organization1.START_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_1 = rs_tDBInput_1.getTimestamp(5);
							if (timestamp_tDBInput_1 != null) {
								organization1.START_DATE = new java.util.Date(timestamp_tDBInput_1.getTime());
							} else {
								organization1.START_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							organization1.END_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_1 = rs_tDBInput_1.getTimestamp(6);
							if (timestamp_tDBInput_1 != null) {
								organization1.END_DATE = new java.util.Date(timestamp_tDBInput_1.getTime());
							} else {
								organization1.END_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							organization1.ORG_REF_ID = null;
						} else {

							organization1.ORG_REF_ID = rs_tDBInput_1.getDouble(7);
							if (rs_tDBInput_1.wasNull()) {
								organization1.ORG_REF_ID = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_organization1 main ] start
						 */

						currentComponent = "tAdvancedHash_organization1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "organization1");
						}

						organization1Struct organization1_HashRow = new organization1Struct();

						organization1_HashRow.EMPLOYEE_ID = organization1.EMPLOYEE_ID;

						organization1_HashRow.ORG_NAME = organization1.ORG_NAME;

						organization1_HashRow.COUNTRY = organization1.COUNTRY;

						organization1_HashRow.ORG_LEVEL = organization1.ORG_LEVEL;

						organization1_HashRow.START_DATE = organization1.START_DATE;

						organization1_HashRow.END_DATE = organization1.END_DATE;

						organization1_HashRow.ORG_REF_ID = organization1.ORG_REF_ID;

						tHash_Lookup_organization1.put(organization1_HashRow);

						tos_count_tAdvancedHash_organization1++;

						/**
						 * [tAdvancedHash_organization1 main ] stop
						 */

						/**
						 * [tAdvancedHash_organization1 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_organization1";

						/**
						 * [tAdvancedHash_organization1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_organization1 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_organization1";

						/**
						 * [tAdvancedHash_organization1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_organization1 end ] start
				 */

				currentComponent = "tAdvancedHash_organization1";

				tHash_Lookup_organization1.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "organization1");
				}

				ok_Hash.put("tAdvancedHash_organization1", true);
				end_Hash.put("tAdvancedHash_organization1", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_organization1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_organization1 finally ] start
				 */

				currentComponent = "tAdvancedHash_organization1";

				/**
				 * [tAdvancedHash_organization1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class organization3Struct
			implements routines.system.IPersistableComparableLookupRow<organization3Struct> {
		final static byte[] commonByteArrayLock_ORION_Job02_Organisation_Dim = new byte[0];
		static byte[] commonByteArray_ORION_Job02_Organisation_Dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Double EMPLOYEE_ID;

		public Double getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public String ORG_NAME;

		public String getORG_NAME() {
			return this.ORG_NAME;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public Double ORG_LEVEL;

		public Double getORG_LEVEL() {
			return this.ORG_LEVEL;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public Double ORG_REF_ID;

		public Double getORG_REF_ID() {
			return this.ORG_REF_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final organization3Struct other = (organization3Struct) obj;

			if (this.EMPLOYEE_ID == null) {
				if (other.EMPLOYEE_ID != null)
					return false;

			} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))

				return false;

			return true;
		}

		public void copyDataTo(organization3Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.ORG_NAME = this.ORG_NAME;
			other.COUNTRY = this.COUNTRY;
			other.ORG_LEVEL = this.ORG_LEVEL;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.ORG_REF_ID = this.ORG_REF_ID;

		}

		public void copyKeysDataTo(organization3Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORION_Job02_Organisation_Dim) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.EMPLOYEE_ID = null;
					} else {
						this.EMPLOYEE_ID = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.EMPLOYEE_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.EMPLOYEE_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ORG_NAME = readString(dis, ois);

				this.COUNTRY = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ORG_LEVEL = null;
				} else {
					this.ORG_LEVEL = dis.readDouble();
				}

				this.START_DATE = readDate(dis, ois);

				this.END_DATE = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ORG_REF_ID = null;
				} else {
					this.ORG_REF_ID = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ORG_NAME, dos, oos);

				writeString(this.COUNTRY, dos, oos);

				if (this.ORG_LEVEL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORG_LEVEL);
				}

				writeDate(this.START_DATE, dos, oos);

				writeDate(this.END_DATE, dos, oos);

				if (this.ORG_REF_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORG_REF_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",ORG_NAME=" + ORG_NAME);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",ORG_LEVEL=" + String.valueOf(ORG_LEVEL));
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",ORG_REF_ID=" + String.valueOf(ORG_REF_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(organization3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEE_ID, other.EMPLOYEE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				organization3Struct organization3 = new organization3Struct();

				/**
				 * [tAdvancedHash_organization3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_organization3", false);
				start_Hash.put("tAdvancedHash_organization3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_organization3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "organization3");
				}

				int tos_count_tAdvancedHash_organization3 = 0;

				// connection name:organization3
				// source node:tDBInput_2 - inputs:(after_tFileInputExcel_1)
				// outputs:(organization3,organization3) | target
				// node:tAdvancedHash_organization3 - inputs:(organization3) outputs:()
				// linked node: tMap_1 -
				// inputs:(staff,organization1,organization3,organization4,organization2,organisation5)
				// outputs:(organization_dim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_organization3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization3Struct> tHash_Lookup_organization3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<organization3Struct>getLookup(matchingModeEnum_organization3);

				globalMap.put("tHash_Lookup_organization3", tHash_Lookup_organization3);

				/**
				 * [tAdvancedHash_organization3 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_2);

				String url_tDBInput_2 = "jdbc:ucanaccess://" + "E:/Documents/Workspace/TP_Donnee/orion.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_2 = "";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:D1UHA/tlhlP/FETtDkXpVEdfus52bYrrN1NWOQ==");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String atnParams_tDBInput_2 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_2 = atnParams_tDBInput_2.replaceAll("&", "\n");
				java.util.Properties atnParamsPrope_tDBInput_2 = new java.util.Properties();
				atnParamsPrope_tDBInput_2.put("user", dbUser_tDBInput_2);
				atnParamsPrope_tDBInput_2.put("password", dbPwd_tDBInput_2);
				atnParamsPrope_tDBInput_2.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_2.getBytes()));
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, atnParamsPrope_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  ORGANIZATION.EMPLOYEE_ID, \n  ORGANIZATION.ORG_NAME, \n  ORGANIZATION.COUNTRY, \n  ORGANIZATION.ORG_LEVEL, \n  OR"
						+ "GANIZATION.START_DATE, \n  ORGANIZATION.END_DATE, \n  ORGANIZATION.ORG_REF_ID\nFROM ORGANIZATION\nWHERE ORG_LEVEL=3";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							organization3.EMPLOYEE_ID = null;
						} else {

							organization3.EMPLOYEE_ID = rs_tDBInput_2.getDouble(1);
							if (rs_tDBInput_2.wasNull()) {
								organization3.EMPLOYEE_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							organization3.ORG_NAME = null;
						} else {

							organization3.ORG_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							organization3.COUNTRY = null;
						} else {

							organization3.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							organization3.ORG_LEVEL = null;
						} else {

							organization3.ORG_LEVEL = rs_tDBInput_2.getDouble(4);
							if (rs_tDBInput_2.wasNull()) {
								organization3.ORG_LEVEL = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							organization3.START_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_2 = rs_tDBInput_2.getTimestamp(5);
							if (timestamp_tDBInput_2 != null) {
								organization3.START_DATE = new java.util.Date(timestamp_tDBInput_2.getTime());
							} else {
								organization3.START_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							organization3.END_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_2 = rs_tDBInput_2.getTimestamp(6);
							if (timestamp_tDBInput_2 != null) {
								organization3.END_DATE = new java.util.Date(timestamp_tDBInput_2.getTime());
							} else {
								organization3.END_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							organization3.ORG_REF_ID = null;
						} else {

							organization3.ORG_REF_ID = rs_tDBInput_2.getDouble(7);
							if (rs_tDBInput_2.wasNull()) {
								organization3.ORG_REF_ID = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_organization3 main ] start
						 */

						currentComponent = "tAdvancedHash_organization3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "organization3");
						}

						organization3Struct organization3_HashRow = new organization3Struct();

						organization3_HashRow.EMPLOYEE_ID = organization3.EMPLOYEE_ID;

						organization3_HashRow.ORG_NAME = organization3.ORG_NAME;

						organization3_HashRow.COUNTRY = organization3.COUNTRY;

						organization3_HashRow.ORG_LEVEL = organization3.ORG_LEVEL;

						organization3_HashRow.START_DATE = organization3.START_DATE;

						organization3_HashRow.END_DATE = organization3.END_DATE;

						organization3_HashRow.ORG_REF_ID = organization3.ORG_REF_ID;

						tHash_Lookup_organization3.put(organization3_HashRow);

						tos_count_tAdvancedHash_organization3++;

						/**
						 * [tAdvancedHash_organization3 main ] stop
						 */

						/**
						 * [tAdvancedHash_organization3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_organization3";

						/**
						 * [tAdvancedHash_organization3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_organization3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_organization3";

						/**
						 * [tAdvancedHash_organization3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_organization3 end ] start
				 */

				currentComponent = "tAdvancedHash_organization3";

				tHash_Lookup_organization3.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "organization3");
				}

				ok_Hash.put("tAdvancedHash_organization3", true);
				end_Hash.put("tAdvancedHash_organization3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_organization3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_organization3 finally ] start
				 */

				currentComponent = "tAdvancedHash_organization3";

				/**
				 * [tAdvancedHash_organization3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class organization4Struct
			implements routines.system.IPersistableComparableLookupRow<organization4Struct> {
		final static byte[] commonByteArrayLock_ORION_Job02_Organisation_Dim = new byte[0];
		static byte[] commonByteArray_ORION_Job02_Organisation_Dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Double EMPLOYEE_ID;

		public Double getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public String ORG_NAME;

		public String getORG_NAME() {
			return this.ORG_NAME;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public Double ORG_LEVEL;

		public Double getORG_LEVEL() {
			return this.ORG_LEVEL;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public Double ORG_REF_ID;

		public Double getORG_REF_ID() {
			return this.ORG_REF_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final organization4Struct other = (organization4Struct) obj;

			if (this.EMPLOYEE_ID == null) {
				if (other.EMPLOYEE_ID != null)
					return false;

			} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))

				return false;

			return true;
		}

		public void copyDataTo(organization4Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.ORG_NAME = this.ORG_NAME;
			other.COUNTRY = this.COUNTRY;
			other.ORG_LEVEL = this.ORG_LEVEL;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.ORG_REF_ID = this.ORG_REF_ID;

		}

		public void copyKeysDataTo(organization4Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORION_Job02_Organisation_Dim) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.EMPLOYEE_ID = null;
					} else {
						this.EMPLOYEE_ID = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.EMPLOYEE_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.EMPLOYEE_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ORG_NAME = readString(dis, ois);

				this.COUNTRY = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ORG_LEVEL = null;
				} else {
					this.ORG_LEVEL = dis.readDouble();
				}

				this.START_DATE = readDate(dis, ois);

				this.END_DATE = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ORG_REF_ID = null;
				} else {
					this.ORG_REF_ID = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ORG_NAME, dos, oos);

				writeString(this.COUNTRY, dos, oos);

				if (this.ORG_LEVEL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORG_LEVEL);
				}

				writeDate(this.START_DATE, dos, oos);

				writeDate(this.END_DATE, dos, oos);

				if (this.ORG_REF_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORG_REF_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",ORG_NAME=" + ORG_NAME);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",ORG_LEVEL=" + String.valueOf(ORG_LEVEL));
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",ORG_REF_ID=" + String.valueOf(ORG_REF_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(organization4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEE_ID, other.EMPLOYEE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				organization4Struct organization4 = new organization4Struct();

				/**
				 * [tAdvancedHash_organization4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_organization4", false);
				start_Hash.put("tAdvancedHash_organization4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_organization4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "organization4");
				}

				int tos_count_tAdvancedHash_organization4 = 0;

				// connection name:organization4
				// source node:tDBInput_3 - inputs:(after_tFileInputExcel_1)
				// outputs:(organization4,organization4) | target
				// node:tAdvancedHash_organization4 - inputs:(organization4) outputs:()
				// linked node: tMap_1 -
				// inputs:(staff,organization1,organization3,organization4,organization2,organisation5)
				// outputs:(organization_dim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_organization4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization4Struct> tHash_Lookup_organization4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<organization4Struct>getLookup(matchingModeEnum_organization4);

				globalMap.put("tHash_Lookup_organization4", tHash_Lookup_organization4);

				/**
				 * [tAdvancedHash_organization4 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_3);

				String url_tDBInput_3 = "jdbc:ucanaccess://" + "E:/Documents/Workspace/TP_Donnee/orion.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_3 = "";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:ThSAtqnkdFgMMUjvhW83RKpaOKbmr5NiBPvXww==");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String atnParams_tDBInput_3 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_3 = atnParams_tDBInput_3.replaceAll("&", "\n");
				java.util.Properties atnParamsPrope_tDBInput_3 = new java.util.Properties();
				atnParamsPrope_tDBInput_3.put("user", dbUser_tDBInput_3);
				atnParamsPrope_tDBInput_3.put("password", dbPwd_tDBInput_3);
				atnParamsPrope_tDBInput_3.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_3.getBytes()));
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, atnParamsPrope_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  ORGANIZATION.EMPLOYEE_ID, \n  ORGANIZATION.ORG_NAME, \n  ORGANIZATION.COUNTRY, \n  ORGANIZATION.ORG_LEVEL, \n  OR"
						+ "GANIZATION.START_DATE, \n  ORGANIZATION.END_DATE, \n  ORGANIZATION.ORG_REF_ID\nFROM ORGANIZATION\nWHERE ORG_LEVEL=4";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							organization4.EMPLOYEE_ID = null;
						} else {

							organization4.EMPLOYEE_ID = rs_tDBInput_3.getDouble(1);
							if (rs_tDBInput_3.wasNull()) {
								organization4.EMPLOYEE_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							organization4.ORG_NAME = null;
						} else {

							organization4.ORG_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							organization4.COUNTRY = null;
						} else {

							organization4.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							organization4.ORG_LEVEL = null;
						} else {

							organization4.ORG_LEVEL = rs_tDBInput_3.getDouble(4);
							if (rs_tDBInput_3.wasNull()) {
								organization4.ORG_LEVEL = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							organization4.START_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_3 = rs_tDBInput_3.getTimestamp(5);
							if (timestamp_tDBInput_3 != null) {
								organization4.START_DATE = new java.util.Date(timestamp_tDBInput_3.getTime());
							} else {
								organization4.START_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							organization4.END_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_3 = rs_tDBInput_3.getTimestamp(6);
							if (timestamp_tDBInput_3 != null) {
								organization4.END_DATE = new java.util.Date(timestamp_tDBInput_3.getTime());
							} else {
								organization4.END_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							organization4.ORG_REF_ID = null;
						} else {

							organization4.ORG_REF_ID = rs_tDBInput_3.getDouble(7);
							if (rs_tDBInput_3.wasNull()) {
								organization4.ORG_REF_ID = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_organization4 main ] start
						 */

						currentComponent = "tAdvancedHash_organization4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "organization4");
						}

						organization4Struct organization4_HashRow = new organization4Struct();

						organization4_HashRow.EMPLOYEE_ID = organization4.EMPLOYEE_ID;

						organization4_HashRow.ORG_NAME = organization4.ORG_NAME;

						organization4_HashRow.COUNTRY = organization4.COUNTRY;

						organization4_HashRow.ORG_LEVEL = organization4.ORG_LEVEL;

						organization4_HashRow.START_DATE = organization4.START_DATE;

						organization4_HashRow.END_DATE = organization4.END_DATE;

						organization4_HashRow.ORG_REF_ID = organization4.ORG_REF_ID;

						tHash_Lookup_organization4.put(organization4_HashRow);

						tos_count_tAdvancedHash_organization4++;

						/**
						 * [tAdvancedHash_organization4 main ] stop
						 */

						/**
						 * [tAdvancedHash_organization4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_organization4";

						/**
						 * [tAdvancedHash_organization4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_organization4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_organization4";

						/**
						 * [tAdvancedHash_organization4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_organization4 end ] start
				 */

				currentComponent = "tAdvancedHash_organization4";

				tHash_Lookup_organization4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "organization4");
				}

				ok_Hash.put("tAdvancedHash_organization4", true);
				end_Hash.put("tAdvancedHash_organization4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_organization4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_organization4 finally ] start
				 */

				currentComponent = "tAdvancedHash_organization4";

				/**
				 * [tAdvancedHash_organization4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class organization2Struct
			implements routines.system.IPersistableComparableLookupRow<organization2Struct> {
		final static byte[] commonByteArrayLock_ORION_Job02_Organisation_Dim = new byte[0];
		static byte[] commonByteArray_ORION_Job02_Organisation_Dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Double EMPLOYEE_ID;

		public Double getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public String ORG_NAME;

		public String getORG_NAME() {
			return this.ORG_NAME;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public Double ORG_LEVEL;

		public Double getORG_LEVEL() {
			return this.ORG_LEVEL;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public Double ORG_REF_ID;

		public Double getORG_REF_ID() {
			return this.ORG_REF_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final organization2Struct other = (organization2Struct) obj;

			if (this.EMPLOYEE_ID == null) {
				if (other.EMPLOYEE_ID != null)
					return false;

			} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))

				return false;

			return true;
		}

		public void copyDataTo(organization2Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.ORG_NAME = this.ORG_NAME;
			other.COUNTRY = this.COUNTRY;
			other.ORG_LEVEL = this.ORG_LEVEL;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.ORG_REF_ID = this.ORG_REF_ID;

		}

		public void copyKeysDataTo(organization2Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORION_Job02_Organisation_Dim) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.EMPLOYEE_ID = null;
					} else {
						this.EMPLOYEE_ID = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.EMPLOYEE_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.EMPLOYEE_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ORG_NAME = readString(dis, ois);

				this.COUNTRY = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ORG_LEVEL = null;
				} else {
					this.ORG_LEVEL = dis.readDouble();
				}

				this.START_DATE = readDate(dis, ois);

				this.END_DATE = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ORG_REF_ID = null;
				} else {
					this.ORG_REF_ID = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ORG_NAME, dos, oos);

				writeString(this.COUNTRY, dos, oos);

				if (this.ORG_LEVEL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORG_LEVEL);
				}

				writeDate(this.START_DATE, dos, oos);

				writeDate(this.END_DATE, dos, oos);

				if (this.ORG_REF_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORG_REF_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",ORG_NAME=" + ORG_NAME);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",ORG_LEVEL=" + String.valueOf(ORG_LEVEL));
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",ORG_REF_ID=" + String.valueOf(ORG_REF_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(organization2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEE_ID, other.EMPLOYEE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				organization2Struct organization2 = new organization2Struct();

				/**
				 * [tAdvancedHash_organization2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_organization2", false);
				start_Hash.put("tAdvancedHash_organization2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_organization2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "organization2");
				}

				int tos_count_tAdvancedHash_organization2 = 0;

				// connection name:organization2
				// source node:tDBInput_4 - inputs:(after_tFileInputExcel_1)
				// outputs:(organization2,organization2) | target
				// node:tAdvancedHash_organization2 - inputs:(organization2) outputs:()
				// linked node: tMap_1 -
				// inputs:(staff,organization1,organization3,organization4,organization2,organisation5)
				// outputs:(organization_dim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_organization2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organization2Struct> tHash_Lookup_organization2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<organization2Struct>getLookup(matchingModeEnum_organization2);

				globalMap.put("tHash_Lookup_organization2", tHash_Lookup_organization2);

				/**
				 * [tAdvancedHash_organization2 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_4);

				String url_tDBInput_4 = "jdbc:ucanaccess://" + "E:/Documents/Workspace/TP_Donnee/orion.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_4 = "";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:rl6N8djcECpoK4C322AtbEOxRwXO2d7zpsr0kQ==");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String atnParams_tDBInput_4 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_4 = atnParams_tDBInput_4.replaceAll("&", "\n");
				java.util.Properties atnParamsPrope_tDBInput_4 = new java.util.Properties();
				atnParamsPrope_tDBInput_4.put("user", dbUser_tDBInput_4);
				atnParamsPrope_tDBInput_4.put("password", dbPwd_tDBInput_4);
				atnParamsPrope_tDBInput_4.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_4.getBytes()));
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, atnParamsPrope_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  ORGANIZATION.EMPLOYEE_ID, \n  ORGANIZATION.ORG_NAME, \n  ORGANIZATION.COUNTRY, \n  ORGANIZATION.ORG_LEVEL, \n  OR"
						+ "GANIZATION.START_DATE, \n  ORGANIZATION.END_DATE, \n  ORGANIZATION.ORG_REF_ID\nFROM ORGANIZATION\nWHERE ORG_LEVEL=2";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							organization2.EMPLOYEE_ID = null;
						} else {

							organization2.EMPLOYEE_ID = rs_tDBInput_4.getDouble(1);
							if (rs_tDBInput_4.wasNull()) {
								organization2.EMPLOYEE_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							organization2.ORG_NAME = null;
						} else {

							organization2.ORG_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							organization2.COUNTRY = null;
						} else {

							organization2.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							organization2.ORG_LEVEL = null;
						} else {

							organization2.ORG_LEVEL = rs_tDBInput_4.getDouble(4);
							if (rs_tDBInput_4.wasNull()) {
								organization2.ORG_LEVEL = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							organization2.START_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_4 = rs_tDBInput_4.getTimestamp(5);
							if (timestamp_tDBInput_4 != null) {
								organization2.START_DATE = new java.util.Date(timestamp_tDBInput_4.getTime());
							} else {
								organization2.START_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							organization2.END_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_4 = rs_tDBInput_4.getTimestamp(6);
							if (timestamp_tDBInput_4 != null) {
								organization2.END_DATE = new java.util.Date(timestamp_tDBInput_4.getTime());
							} else {
								organization2.END_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							organization2.ORG_REF_ID = null;
						} else {

							organization2.ORG_REF_ID = rs_tDBInput_4.getDouble(7);
							if (rs_tDBInput_4.wasNull()) {
								organization2.ORG_REF_ID = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_organization2 main ] start
						 */

						currentComponent = "tAdvancedHash_organization2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "organization2");
						}

						organization2Struct organization2_HashRow = new organization2Struct();

						organization2_HashRow.EMPLOYEE_ID = organization2.EMPLOYEE_ID;

						organization2_HashRow.ORG_NAME = organization2.ORG_NAME;

						organization2_HashRow.COUNTRY = organization2.COUNTRY;

						organization2_HashRow.ORG_LEVEL = organization2.ORG_LEVEL;

						organization2_HashRow.START_DATE = organization2.START_DATE;

						organization2_HashRow.END_DATE = organization2.END_DATE;

						organization2_HashRow.ORG_REF_ID = organization2.ORG_REF_ID;

						tHash_Lookup_organization2.put(organization2_HashRow);

						tos_count_tAdvancedHash_organization2++;

						/**
						 * [tAdvancedHash_organization2 main ] stop
						 */

						/**
						 * [tAdvancedHash_organization2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_organization2";

						/**
						 * [tAdvancedHash_organization2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_organization2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_organization2";

						/**
						 * [tAdvancedHash_organization2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_organization2 end ] start
				 */

				currentComponent = "tAdvancedHash_organization2";

				tHash_Lookup_organization2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "organization2");
				}

				ok_Hash.put("tAdvancedHash_organization2", true);
				end_Hash.put("tAdvancedHash_organization2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_organization2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_organization2 finally ] start
				 */

				currentComponent = "tAdvancedHash_organization2";

				/**
				 * [tAdvancedHash_organization2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class organisation5Struct
			implements routines.system.IPersistableComparableLookupRow<organisation5Struct> {
		final static byte[] commonByteArrayLock_ORION_Job02_Organisation_Dim = new byte[0];
		static byte[] commonByteArray_ORION_Job02_Organisation_Dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Double EMPLOYEE_ID;

		public Double getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public String ORG_NAME;

		public String getORG_NAME() {
			return this.ORG_NAME;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public Double ORG_LEVEL;

		public Double getORG_LEVEL() {
			return this.ORG_LEVEL;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public Double ORG_REF_ID;

		public Double getORG_REF_ID() {
			return this.ORG_REF_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final organisation5Struct other = (organisation5Struct) obj;

			if (this.EMPLOYEE_ID == null) {
				if (other.EMPLOYEE_ID != null)
					return false;

			} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))

				return false;

			return true;
		}

		public void copyDataTo(organisation5Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.ORG_NAME = this.ORG_NAME;
			other.COUNTRY = this.COUNTRY;
			other.ORG_LEVEL = this.ORG_LEVEL;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.ORG_REF_ID = this.ORG_REF_ID;

		}

		public void copyKeysDataTo(organisation5Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORION_Job02_Organisation_Dim) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.EMPLOYEE_ID = null;
					} else {
						this.EMPLOYEE_ID = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.EMPLOYEE_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.EMPLOYEE_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ORG_NAME = readString(dis, ois);

				this.COUNTRY = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ORG_LEVEL = null;
				} else {
					this.ORG_LEVEL = dis.readDouble();
				}

				this.START_DATE = readDate(dis, ois);

				this.END_DATE = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ORG_REF_ID = null;
				} else {
					this.ORG_REF_ID = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ORG_NAME, dos, oos);

				writeString(this.COUNTRY, dos, oos);

				if (this.ORG_LEVEL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORG_LEVEL);
				}

				writeDate(this.START_DATE, dos, oos);

				writeDate(this.END_DATE, dos, oos);

				if (this.ORG_REF_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORG_REF_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",ORG_NAME=" + ORG_NAME);
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",ORG_LEVEL=" + String.valueOf(ORG_LEVEL));
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",ORG_REF_ID=" + String.valueOf(ORG_REF_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(organisation5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEE_ID, other.EMPLOYEE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				organisation5Struct organisation5 = new organisation5Struct();

				/**
				 * [tAdvancedHash_organisation5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_organisation5", false);
				start_Hash.put("tAdvancedHash_organisation5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_organisation5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "organisation5");
				}

				int tos_count_tAdvancedHash_organisation5 = 0;

				// connection name:organisation5
				// source node:tDBInput_5 - inputs:(after_tFileInputExcel_1)
				// outputs:(organisation5,organisation5) | target
				// node:tAdvancedHash_organisation5 - inputs:(organisation5) outputs:()
				// linked node: tMap_1 -
				// inputs:(staff,organization1,organization3,organization4,organization2,organisation5)
				// outputs:(organization_dim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_organisation5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<organisation5Struct> tHash_Lookup_organisation5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<organisation5Struct>getLookup(matchingModeEnum_organisation5);

				globalMap.put("tHash_Lookup_organisation5", tHash_Lookup_organisation5);

				/**
				 * [tAdvancedHash_organisation5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_5);

				String url_tDBInput_5 = "jdbc:ucanaccess://" + "E:/Documents/Workspace/TP_Donnee/orion.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_5 = "";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:93pvnL9uG9apnHfpPhEkErkoRgpMLGWk2n7Q6A==");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String atnParams_tDBInput_5 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_5 = atnParams_tDBInput_5.replaceAll("&", "\n");
				java.util.Properties atnParamsPrope_tDBInput_5 = new java.util.Properties();
				atnParamsPrope_tDBInput_5.put("user", dbUser_tDBInput_5);
				atnParamsPrope_tDBInput_5.put("password", dbPwd_tDBInput_5);
				atnParamsPrope_tDBInput_5.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_5.getBytes()));
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, atnParamsPrope_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "SELECT \n  ORGANIZATION.EMPLOYEE_ID, \n  ORGANIZATION.ORG_NAME, \n  ORGANIZATION.COUNTRY, \n  ORGANIZATION.ORG_LEVEL, \n  OR"
						+ "GANIZATION.START_DATE, \n  ORGANIZATION.END_DATE, \n  ORGANIZATION.ORG_REF_ID\nFROM ORGANIZATION\nWHERE ORG_LEVEL=5";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							organisation5.EMPLOYEE_ID = null;
						} else {

							organisation5.EMPLOYEE_ID = rs_tDBInput_5.getDouble(1);
							if (rs_tDBInput_5.wasNull()) {
								organisation5.EMPLOYEE_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							organisation5.ORG_NAME = null;
						} else {

							organisation5.ORG_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							organisation5.COUNTRY = null;
						} else {

							organisation5.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							organisation5.ORG_LEVEL = null;
						} else {

							organisation5.ORG_LEVEL = rs_tDBInput_5.getDouble(4);
							if (rs_tDBInput_5.wasNull()) {
								organisation5.ORG_LEVEL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							organisation5.START_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_5 = rs_tDBInput_5.getTimestamp(5);
							if (timestamp_tDBInput_5 != null) {
								organisation5.START_DATE = new java.util.Date(timestamp_tDBInput_5.getTime());
							} else {
								organisation5.START_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							organisation5.END_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_5 = rs_tDBInput_5.getTimestamp(6);
							if (timestamp_tDBInput_5 != null) {
								organisation5.END_DATE = new java.util.Date(timestamp_tDBInput_5.getTime());
							} else {
								organisation5.END_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							organisation5.ORG_REF_ID = null;
						} else {

							organisation5.ORG_REF_ID = rs_tDBInput_5.getDouble(7);
							if (rs_tDBInput_5.wasNull()) {
								organisation5.ORG_REF_ID = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_organisation5 main ] start
						 */

						currentComponent = "tAdvancedHash_organisation5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "organisation5");
						}

						organisation5Struct organisation5_HashRow = new organisation5Struct();

						organisation5_HashRow.EMPLOYEE_ID = organisation5.EMPLOYEE_ID;

						organisation5_HashRow.ORG_NAME = organisation5.ORG_NAME;

						organisation5_HashRow.COUNTRY = organisation5.COUNTRY;

						organisation5_HashRow.ORG_LEVEL = organisation5.ORG_LEVEL;

						organisation5_HashRow.START_DATE = organisation5.START_DATE;

						organisation5_HashRow.END_DATE = organisation5.END_DATE;

						organisation5_HashRow.ORG_REF_ID = organisation5.ORG_REF_ID;

						tHash_Lookup_organisation5.put(organisation5_HashRow);

						tos_count_tAdvancedHash_organisation5++;

						/**
						 * [tAdvancedHash_organisation5 main ] stop
						 */

						/**
						 * [tAdvancedHash_organisation5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_organisation5";

						/**
						 * [tAdvancedHash_organisation5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_organisation5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_organisation5";

						/**
						 * [tAdvancedHash_organisation5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_organisation5 end ] start
				 */

				currentComponent = "tAdvancedHash_organisation5";

				tHash_Lookup_organisation5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "organisation5");
				}

				ok_Hash.put("tAdvancedHash_organisation5", true);
				end_Hash.put("tAdvancedHash_organisation5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_organisation5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_organisation5 finally ] start
				 */

				currentComponent = "tAdvancedHash_organisation5";

				/**
				 * [tAdvancedHash_organisation5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Job02_Organisation_Dim Job02_Organisation_DimClass = new Job02_Organisation_Dim();

		int exitCode = Job02_Organisation_DimClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Job02_Organisation_Dim.class.getClassLoader()
					.getResourceAsStream("orion/job02_organisation_dim_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Job02_Organisation_Dim.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Job02_Organisation_Dim");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 202048 characters generated by Talend Open Studio for Data Integration on the
 * January 23, 2021 at 11:52:55 PM CET
 ************************************************************************************************/