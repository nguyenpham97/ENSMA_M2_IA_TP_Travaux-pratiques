/*
 * generated by Xtext 2.23.0
 */
package fr.ensma.idm.choreography.robottxtsyntax.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TxtDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ChoreographyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.idm.choreography.robottxtsyntax.TxtDsl.Choreography");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChoreographyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cChoreographyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInstructionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cInstructionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cInstructionsInstructionParserRuleCall_4_2_0 = (RuleCall)cInstructionsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cInstructionsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_4_3_1_0 = (RuleCall)cInstructionsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Choreography:
		//	{Choreography}
		//	'Choreography'
		//	name=EString
		//	'{' ('instructions' '{' instructions+=Instruction ("," instructions+=Instruction)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Choreography} 'Choreography' name=EString '{' ('instructions' '{' instructions+=Instruction (","
		//instructions+=Instruction)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Choreography}
		public Action getChoreographyAction_0() { return cChoreographyAction_0; }
		
		//'Choreography'
		public Keyword getChoreographyKeyword_1() { return cChoreographyKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('instructions' '{' instructions+=Instruction ("," instructions+=Instruction)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'instructions'
		public Keyword getInstructionsKeyword_4_0() { return cInstructionsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//instructions+=Instruction
		public Assignment getInstructionsAssignment_4_2() { return cInstructionsAssignment_4_2; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_4_2_0() { return cInstructionsInstructionParserRuleCall_4_2_0; }
		
		//("," instructions+=Instruction)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//instructions+=Instruction
		public Assignment getInstructionsAssignment_4_3_1() { return cInstructionsAssignment_4_3_1; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_4_3_1_0() { return cInstructionsInstructionParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.idm.choreography.robottxtsyntax.TxtDsl.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChoreographyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPenDownParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPenUpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGrabParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReleaseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTurnLeftParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTurnRightParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cGoForwardParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cGoBackwardParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Instruction:
		//	Choreography | PenDown | PenUp | Grab | Release | TurnLeft | TurnRight | GoForward | GoBackward;
		@Override public ParserRule getRule() { return rule; }
		
		//Choreography | PenDown | PenUp | Grab | Release | TurnLeft | TurnRight | GoForward | GoBackward
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Choreography
		public RuleCall getChoreographyParserRuleCall_0() { return cChoreographyParserRuleCall_0; }
		
		//PenDown
		public RuleCall getPenDownParserRuleCall_1() { return cPenDownParserRuleCall_1; }
		
		//PenUp
		public RuleCall getPenUpParserRuleCall_2() { return cPenUpParserRuleCall_2; }
		
		//Grab
		public RuleCall getGrabParserRuleCall_3() { return cGrabParserRuleCall_3; }
		
		//Release
		public RuleCall getReleaseParserRuleCall_4() { return cReleaseParserRuleCall_4; }
		
		//TurnLeft
		public RuleCall getTurnLeftParserRuleCall_5() { return cTurnLeftParserRuleCall_5; }
		
		//TurnRight
		public RuleCall getTurnRightParserRuleCall_6() { return cTurnRightParserRuleCall_6; }
		
		//GoForward
		public RuleCall getGoForwardParserRuleCall_7() { return cGoForwardParserRuleCall_7; }
		
		//GoBackward
		public RuleCall getGoBackwardParserRuleCall_8() { return cGoBackwardParserRuleCall_8; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.idm.choreography.robottxtsyntax.TxtDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class PenDownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.idm.choreography.robottxtsyntax.TxtDsl.PenDown");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPenDownAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPenDownKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PenDown:
		//	{PenDown}
		//	'PenDown';
		@Override public ParserRule getRule() { return rule; }
		
		//{PenDown} 'PenDown'
		public Group getGroup() { return cGroup; }
		
		//{PenDown}
		public Action getPenDownAction_0() { return cPenDownAction_0; }
		
		//'PenDown'
		public Keyword getPenDownKeyword_1() { return cPenDownKeyword_1; }
	}
	public class PenUpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.idm.choreography.robottxtsyntax.TxtDsl.PenUp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPenUpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPenUpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PenUp:
		//	{PenUp}
		//	'PenUp';
		@Override public ParserRule getRule() { return rule; }
		
		//{PenUp} 'PenUp'
		public Group getGroup() { return cGroup; }
		
		//{PenUp}
		public Action getPenUpAction_0() { return cPenUpAction_0; }
		
		//'PenUp'
		public Keyword getPenUpKeyword_1() { return cPenUpKeyword_1; }
	}
	public class GrabElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.idm.choreography.robottxtsyntax.TxtDsl.Grab");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGrabAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGrabKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Grab:
		//	{Grab}
		//	'Grab';
		@Override public ParserRule getRule() { return rule; }
		
		//{Grab} 'Grab'
		public Group getGroup() { return cGroup; }
		
		//{Grab}
		public Action getGrabAction_0() { return cGrabAction_0; }
		
		//'Grab'
		public Keyword getGrabKeyword_1() { return cGrabKeyword_1; }
	}
	public class ReleaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.idm.choreography.robottxtsyntax.TxtDsl.Release");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReleaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReleaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Release:
		//	{Release}
		//	'Release';
		@Override public ParserRule getRule() { return rule; }
		
		//{Release} 'Release'
		public Group getGroup() { return cGroup; }
		
		//{Release}
		public Action getReleaseAction_0() { return cReleaseAction_0; }
		
		//'Release'
		public Keyword getReleaseKeyword_1() { return cReleaseKeyword_1; }
	}
	public class TurnLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.idm.choreography.robottxtsyntax.TxtDsl.TurnLeft");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAngleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAngleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAngleEIntParserRuleCall_3_0 = (RuleCall)cAngleAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TurnLeft:
		//	'TurnLeft'
		//	'{'
		//	'angle' angle=EInt
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'TurnLeft' '{' 'angle' angle=EInt '}'
		public Group getGroup() { return cGroup; }
		
		//'TurnLeft'
		public Keyword getTurnLeftKeyword_0() { return cTurnLeftKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'angle'
		public Keyword getAngleKeyword_2() { return cAngleKeyword_2; }
		
		//angle=EInt
		public Assignment getAngleAssignment_3() { return cAngleAssignment_3; }
		
		//EInt
		public RuleCall getAngleEIntParserRuleCall_3_0() { return cAngleEIntParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TurnRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.idm.choreography.robottxtsyntax.TxtDsl.TurnRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAngleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAngleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAngleEIntParserRuleCall_3_0 = (RuleCall)cAngleAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TurnRight:
		//	'TurnRight'
		//	'{'
		//	'angle' angle=EInt
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'TurnRight' '{' 'angle' angle=EInt '}'
		public Group getGroup() { return cGroup; }
		
		//'TurnRight'
		public Keyword getTurnRightKeyword_0() { return cTurnRightKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'angle'
		public Keyword getAngleKeyword_2() { return cAngleKeyword_2; }
		
		//angle=EInt
		public Assignment getAngleAssignment_3() { return cAngleAssignment_3; }
		
		//EInt
		public RuleCall getAngleEIntParserRuleCall_3_0() { return cAngleEIntParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GoForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.idm.choreography.robottxtsyntax.TxtDsl.GoForward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoForwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDistanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDistanceEIntParserRuleCall_3_0 = (RuleCall)cDistanceAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GoForward:
		//	'GoForward'
		//	'{'
		//	'distance' distance=EInt
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'GoForward' '{' 'distance' distance=EInt '}'
		public Group getGroup() { return cGroup; }
		
		//'GoForward'
		public Keyword getGoForwardKeyword_0() { return cGoForwardKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//distance=EInt
		public Assignment getDistanceAssignment_3() { return cDistanceAssignment_3; }
		
		//EInt
		public RuleCall getDistanceEIntParserRuleCall_3_0() { return cDistanceEIntParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GoBackwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.idm.choreography.robottxtsyntax.TxtDsl.GoBackward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoBackwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDistanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDistanceEIntParserRuleCall_3_0 = (RuleCall)cDistanceAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GoBackward:
		//	'GoBackward'
		//	'{'
		//	'distance' distance=EInt
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'GoBackward' '{' 'distance' distance=EInt '}'
		public Group getGroup() { return cGroup; }
		
		//'GoBackward'
		public Keyword getGoBackwardKeyword_0() { return cGoBackwardKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//distance=EInt
		public Assignment getDistanceAssignment_3() { return cDistanceAssignment_3; }
		
		//EInt
		public RuleCall getDistanceEIntParserRuleCall_3_0() { return cDistanceEIntParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.idm.choreography.robottxtsyntax.TxtDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final ChoreographyElements pChoreography;
	private final InstructionElements pInstruction;
	private final EStringElements pEString;
	private final PenDownElements pPenDown;
	private final PenUpElements pPenUp;
	private final GrabElements pGrab;
	private final ReleaseElements pRelease;
	private final TurnLeftElements pTurnLeft;
	private final TurnRightElements pTurnRight;
	private final GoForwardElements pGoForward;
	private final GoBackwardElements pGoBackward;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TxtDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pChoreography = new ChoreographyElements();
		this.pInstruction = new InstructionElements();
		this.pEString = new EStringElements();
		this.pPenDown = new PenDownElements();
		this.pPenUp = new PenUpElements();
		this.pGrab = new GrabElements();
		this.pRelease = new ReleaseElements();
		this.pTurnLeft = new TurnLeftElements();
		this.pTurnRight = new TurnRightElements();
		this.pGoForward = new GoForwardElements();
		this.pGoBackward = new GoBackwardElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.ensma.idm.choreography.robottxtsyntax.TxtDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Choreography:
	//	{Choreography}
	//	'Choreography'
	//	name=EString
	//	'{' ('instructions' '{' instructions+=Instruction ("," instructions+=Instruction)* '}')?
	//	'}';
	public ChoreographyElements getChoreographyAccess() {
		return pChoreography;
	}
	
	public ParserRule getChoreographyRule() {
		return getChoreographyAccess().getRule();
	}
	
	//Instruction:
	//	Choreography | PenDown | PenUp | Grab | Release | TurnLeft | TurnRight | GoForward | GoBackward;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//PenDown:
	//	{PenDown}
	//	'PenDown';
	public PenDownElements getPenDownAccess() {
		return pPenDown;
	}
	
	public ParserRule getPenDownRule() {
		return getPenDownAccess().getRule();
	}
	
	//PenUp:
	//	{PenUp}
	//	'PenUp';
	public PenUpElements getPenUpAccess() {
		return pPenUp;
	}
	
	public ParserRule getPenUpRule() {
		return getPenUpAccess().getRule();
	}
	
	//Grab:
	//	{Grab}
	//	'Grab';
	public GrabElements getGrabAccess() {
		return pGrab;
	}
	
	public ParserRule getGrabRule() {
		return getGrabAccess().getRule();
	}
	
	//Release:
	//	{Release}
	//	'Release';
	public ReleaseElements getReleaseAccess() {
		return pRelease;
	}
	
	public ParserRule getReleaseRule() {
		return getReleaseAccess().getRule();
	}
	
	//TurnLeft:
	//	'TurnLeft'
	//	'{'
	//	'angle' angle=EInt
	//	'}';
	public TurnLeftElements getTurnLeftAccess() {
		return pTurnLeft;
	}
	
	public ParserRule getTurnLeftRule() {
		return getTurnLeftAccess().getRule();
	}
	
	//TurnRight:
	//	'TurnRight'
	//	'{'
	//	'angle' angle=EInt
	//	'}';
	public TurnRightElements getTurnRightAccess() {
		return pTurnRight;
	}
	
	public ParserRule getTurnRightRule() {
		return getTurnRightAccess().getRule();
	}
	
	//GoForward:
	//	'GoForward'
	//	'{'
	//	'distance' distance=EInt
	//	'}';
	public GoForwardElements getGoForwardAccess() {
		return pGoForward;
	}
	
	public ParserRule getGoForwardRule() {
		return getGoForwardAccess().getRule();
	}
	
	//GoBackward:
	//	'GoBackward'
	//	'{'
	//	'distance' distance=EInt
	//	'}';
	public GoBackwardElements getGoBackwardAccess() {
		return pGoBackward;
	}
	
	public ParserRule getGoBackwardRule() {
		return getGoBackwardAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
