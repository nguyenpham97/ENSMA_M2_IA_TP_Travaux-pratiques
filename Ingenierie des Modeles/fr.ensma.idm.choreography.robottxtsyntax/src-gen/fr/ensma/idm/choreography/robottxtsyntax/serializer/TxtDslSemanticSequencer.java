/*
 * generated by Xtext 2.23.0
 */
package fr.ensma.idm.choreography.robottxtsyntax.serializer;

import com.google.inject.Inject;
import fr.ensma.idm.choreography.robottxtsyntax.services.TxtDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import robotnxt.Choreography;
import robotnxt.GoBackward;
import robotnxt.GoForward;
import robotnxt.Grab;
import robotnxt.PenDown;
import robotnxt.PenUp;
import robotnxt.Release;
import robotnxt.RobotnxtPackage;
import robotnxt.TurnLeft;
import robotnxt.TurnRight;

@SuppressWarnings("all")
public class TxtDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TxtDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RobotnxtPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RobotnxtPackage.CHOREOGRAPHY:
				sequence_Choreography(context, (Choreography) semanticObject); 
				return; 
			case RobotnxtPackage.GO_BACKWARD:
				sequence_GoBackward(context, (GoBackward) semanticObject); 
				return; 
			case RobotnxtPackage.GO_FORWARD:
				sequence_GoForward(context, (GoForward) semanticObject); 
				return; 
			case RobotnxtPackage.GRAB:
				sequence_Grab(context, (Grab) semanticObject); 
				return; 
			case RobotnxtPackage.PEN_DOWN:
				sequence_PenDown(context, (PenDown) semanticObject); 
				return; 
			case RobotnxtPackage.PEN_UP:
				sequence_PenUp(context, (PenUp) semanticObject); 
				return; 
			case RobotnxtPackage.RELEASE:
				sequence_Release(context, (Release) semanticObject); 
				return; 
			case RobotnxtPackage.TURN_LEFT:
				sequence_TurnLeft(context, (TurnLeft) semanticObject); 
				return; 
			case RobotnxtPackage.TURN_RIGHT:
				sequence_TurnRight(context, (TurnRight) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Choreography returns Choreography
	 *     Instruction returns Choreography
	 *
	 * Constraint:
	 *     (name=EString (instructions+=Instruction instructions+=Instruction*)?)
	 */
	protected void sequence_Choreography(ISerializationContext context, Choreography semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns GoBackward
	 *     GoBackward returns GoBackward
	 *
	 * Constraint:
	 *     distance=EInt
	 */
	protected void sequence_GoBackward(ISerializationContext context, GoBackward semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotnxtPackage.Literals.GO_BACKWARD__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotnxtPackage.Literals.GO_BACKWARD__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoBackwardAccess().getDistanceEIntParserRuleCall_3_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns GoForward
	 *     GoForward returns GoForward
	 *
	 * Constraint:
	 *     distance=EInt
	 */
	protected void sequence_GoForward(ISerializationContext context, GoForward semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotnxtPackage.Literals.GO_FORWARD__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotnxtPackage.Literals.GO_FORWARD__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoForwardAccess().getDistanceEIntParserRuleCall_3_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Grab
	 *     Grab returns Grab
	 *
	 * Constraint:
	 *     {Grab}
	 */
	protected void sequence_Grab(ISerializationContext context, Grab semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns PenDown
	 *     PenDown returns PenDown
	 *
	 * Constraint:
	 *     {PenDown}
	 */
	protected void sequence_PenDown(ISerializationContext context, PenDown semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns PenUp
	 *     PenUp returns PenUp
	 *
	 * Constraint:
	 *     {PenUp}
	 */
	protected void sequence_PenUp(ISerializationContext context, PenUp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Release
	 *     Release returns Release
	 *
	 * Constraint:
	 *     {Release}
	 */
	protected void sequence_Release(ISerializationContext context, Release semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns TurnLeft
	 *     TurnLeft returns TurnLeft
	 *
	 * Constraint:
	 *     angle=EInt
	 */
	protected void sequence_TurnLeft(ISerializationContext context, TurnLeft semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotnxtPackage.Literals.TURN_LEFT__ANGLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotnxtPackage.Literals.TURN_LEFT__ANGLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTurnLeftAccess().getAngleEIntParserRuleCall_3_0(), semanticObject.getAngle());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns TurnRight
	 *     TurnRight returns TurnRight
	 *
	 * Constraint:
	 *     angle=EInt
	 */
	protected void sequence_TurnRight(ISerializationContext context, TurnRight semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotnxtPackage.Literals.TURN_RIGHT__ANGLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotnxtPackage.Literals.TURN_RIGHT__ANGLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTurnRightAccess().getAngleEIntParserRuleCall_3_0(), semanticObject.getAngle());
		feeder.finish();
	}
	
	
}
