/*
 * generated by Xtext 2.23.0
 */
package fr.ensma.idm.choreography.robottxtsyntax.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.ensma.idm.choreography.robottxtsyntax.ide.contentassist.antlr.internal.InternalTxtDslParser;
import fr.ensma.idm.choreography.robottxtsyntax.services.TxtDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TxtDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TxtDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TxtDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getChoreographyAccess().getGroup(), "rule__Choreography__Group__0");
			builder.put(grammarAccess.getChoreographyAccess().getGroup_4(), "rule__Choreography__Group_4__0");
			builder.put(grammarAccess.getChoreographyAccess().getGroup_4_3(), "rule__Choreography__Group_4_3__0");
			builder.put(grammarAccess.getPenDownAccess().getGroup(), "rule__PenDown__Group__0");
			builder.put(grammarAccess.getPenUpAccess().getGroup(), "rule__PenUp__Group__0");
			builder.put(grammarAccess.getGrabAccess().getGroup(), "rule__Grab__Group__0");
			builder.put(grammarAccess.getReleaseAccess().getGroup(), "rule__Release__Group__0");
			builder.put(grammarAccess.getTurnLeftAccess().getGroup(), "rule__TurnLeft__Group__0");
			builder.put(grammarAccess.getTurnRightAccess().getGroup(), "rule__TurnRight__Group__0");
			builder.put(grammarAccess.getGoForwardAccess().getGroup(), "rule__GoForward__Group__0");
			builder.put(grammarAccess.getGoBackwardAccess().getGroup(), "rule__GoBackward__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getChoreographyAccess().getNameAssignment_2(), "rule__Choreography__NameAssignment_2");
			builder.put(grammarAccess.getChoreographyAccess().getInstructionsAssignment_4_2(), "rule__Choreography__InstructionsAssignment_4_2");
			builder.put(grammarAccess.getChoreographyAccess().getInstructionsAssignment_4_3_1(), "rule__Choreography__InstructionsAssignment_4_3_1");
			builder.put(grammarAccess.getTurnLeftAccess().getAngleAssignment_3(), "rule__TurnLeft__AngleAssignment_3");
			builder.put(grammarAccess.getTurnRightAccess().getAngleAssignment_3(), "rule__TurnRight__AngleAssignment_3");
			builder.put(grammarAccess.getGoForwardAccess().getDistanceAssignment_3(), "rule__GoForward__DistanceAssignment_3");
			builder.put(grammarAccess.getGoBackwardAccess().getDistanceAssignment_3(), "rule__GoBackward__DistanceAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TxtDslGrammarAccess grammarAccess;

	@Override
	protected InternalTxtDslParser createParser() {
		InternalTxtDslParser result = new InternalTxtDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TxtDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TxtDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
